{"version":3,"sources":["ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","listItems","items","map","item","className","key","type","id","value","text","onChange","e","setUpdate","target","onClick","deleteItem","icon","duration","easing","library","add","faTrash","App","state","currentItem","addItem","bind","handleInput","preventDefault","newItem","this","setState","Date","now","filteredItems","filter","console","log","onSubmit","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6TAgCeA,MA1Bf,SAAmBC,GACf,IACMC,EADQD,EAAME,MACIC,KAAI,SAAAC,GACxB,OAAO,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KACnC,2BACI,2BAAOC,KAAK,OAAOC,GAAIJ,EAAKE,IAAKG,MAAOL,EAAKM,KAAMC,SAAU,SAACC,GAC1DZ,EAAMa,UAAUD,EAAEE,OAAOL,MAAOL,EAAKE,QAEzC,8BAEI,kBAAC,IAAD,CAAiBD,UAAU,UAAUU,QAAS,WAC1Cf,EAAMgB,WAAWZ,EAAKE,MACvBW,KAAK,gBAMxB,OAAO,6BACH,kBAAC,IAAD,CAAUC,SAAU,IAAKC,OAAO,eAC3BlB,K,eCpBbmB,IAAQC,IAAIC,K,IAiFGC,E,kDA9Eb,WAAYvB,GAAQ,IAAD,8BACjB,cAAMA,IACDwB,MAAQ,CACXtB,MAAO,GACPuB,YAAa,CACXf,KAAM,GACNJ,IAAK,KAGT,EAAKoB,QAAU,EAAKA,QAAQC,KAAb,gBACf,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKX,WAAa,EAAKA,WAAWW,KAAhB,gBAClB,EAAKd,UAAY,EAAKA,UAAUc,KAAf,gBAZA,E,oDAcXf,GACNA,EAAEiB,iBACF,IAAMC,EAAUC,KAAKP,MAAMC,YAC3B,GAAqB,KAAjBK,EAAQpB,KAAa,CACvB,IAAMR,EAAK,sBAAO6B,KAAKP,MAAMtB,OAAlB,CAAyB4B,IACpCC,KAAKC,SAAS,CACZ9B,MAAOA,EACPuB,YAAa,CACXf,KAAM,GACNJ,IAAK,S,kCAKDM,GACVmB,KAAKC,SAAS,CACZP,YAAa,CACXf,KAAME,EAAEE,OAAOL,MACfH,IAAK2B,KAAKC,W,iCAIL5B,GACT,IAAM6B,EAAgBJ,KAAKP,MAAMtB,MAAMkC,QAAO,SAAAhC,GAAI,OAChDA,EAAKE,MAAQA,KACfyB,KAAKC,SAAS,CACZ9B,MAAOiC,M,gCAIDzB,EAAMJ,GACd+B,QAAQC,IAAI,SAAWP,KAAKP,MAAMtB,OAClC,IAAMA,EAAQ6B,KAAKP,MAAMtB,MACzBA,EAAMC,KAAI,SAAAC,GACJA,EAAKE,MAAQA,IACf+B,QAAQC,IAAIlC,EAAKE,IAAM,OAASA,GAChCF,EAAKM,KAAOA,MAGhBqB,KAAKC,SAAS,CACZ9B,MAAOA,M,+BAMT,OACE,yBAAKG,UAAU,OACb,gCACE,0BAAMG,GAAG,aAAa+B,SAAUR,KAAKL,SACnC,2BAAOnB,KAAK,OAAOiC,YAAY,aAAa/B,MAAOsB,KAAKP,MAAMC,YAAYf,KAAMC,SAAUoB,KAAKH,cAC/F,4BAAQrB,KAAK,UAAb,QAEF,2BAAIwB,KAAKP,MAAMtB,MAAMQ,MAErB,kBAAC,EAAD,CAAWR,MAAO6B,KAAKP,MAAMtB,MAAOc,WAAYe,KAAKf,WAAYH,UAAWkB,KAAKlB,kB,GAtEzE4B,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZJC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5e724a4a.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\nimport './ListItems.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport FlipMove from 'react-flip-move';\r\n\r\nfunction ListItems(props) {\r\n    const items = props.items;\r\n    const listItems = items.map(item => {\r\n        return <div className=\"list\" key={item.key}>\r\n            <p>\r\n                <input type=\"text\" id={item.key} value={item.text} onChange={(e) => {\r\n                    props.setUpdate(e.target.value, item.key)\r\n                }} />\r\n                <span>\r\n\r\n                    <FontAwesomeIcon className=\"faicons\" onClick={() => {\r\n                        props.deleteItem(item.key)\r\n                    }} icon=\"trash\" />\r\n                </span>\r\n            </p>\r\n\r\n        </div>\r\n    })\r\n    return <div>\r\n        <FlipMove duration={300} easing=\"ease-in-out\">\r\n            {listItems}\r\n        </FlipMove>\r\n\r\n    </div>;\r\n}\r\n\r\nexport default ListItems;","import React from 'react';\r\nimport './App.css';\r\nimport ListItems from './ListItems'\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\r\n\r\nlibrary.add(faTrash)\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: [],\r\n      currentItem: {\r\n        text: '',\r\n        key: ''\r\n      }\r\n    }\r\n    this.addItem = this.addItem.bind(this);\r\n    this.handleInput = this.handleInput.bind(this);\r\n    this.deleteItem = this.deleteItem.bind(this);\r\n    this.setUpdate = this.setUpdate.bind(this);\r\n  }\r\n  addItem(e) {\r\n    e.preventDefault();\r\n    const newItem = this.state.currentItem;\r\n    if (newItem.text !== \"\") {\r\n      const items = [...this.state.items, newItem];\r\n      this.setState({\r\n        items: items,\r\n        currentItem: {\r\n          text: '',\r\n          key: ''\r\n        }\r\n      })\r\n    }\r\n  }\r\n  handleInput(e) {\r\n    this.setState({\r\n      currentItem: {\r\n        text: e.target.value,\r\n        key: Date.now()\r\n      }\r\n    })\r\n  }\r\n  deleteItem(key) {\r\n    const filteredItems = this.state.items.filter(item =>\r\n      item.key !== key);\r\n    this.setState({\r\n      items: filteredItems\r\n    })\r\n\r\n  }\r\n  setUpdate(text, key) {\r\n    console.log(\"items:\" + this.state.items);\r\n    const items = this.state.items;\r\n    items.map(item => {\r\n      if (item.key === key) {\r\n        console.log(item.key + \"    \" + key)\r\n        item.text = text;\r\n      }\r\n    })\r\n    this.setState({\r\n      items: items\r\n    })\r\n\r\n\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header>\r\n          <form id=\"to-do-form\" onSubmit={this.addItem}>\r\n            <input type=\"text\" placeholder=\"Enter task\" value={this.state.currentItem.text} onChange={this.handleInput}></input>\r\n            <button type=\"submit\">Add</button>\r\n          </form>\r\n          <p>{this.state.items.text}</p>\r\n\r\n          <ListItems items={this.state.items} deleteItem={this.deleteItem} setUpdate={this.setUpdate} />\r\n\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}